###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################
# This sample playbook demonstrates basic data set operations using modules
# included in the Red Hat Ansible Certified  Content for IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories data_set_basics.yml
#  ansible-playbook -i inventories data_set_basics.yml -v
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook, for example,
#  `data_set_name` and `system_name`.
#
# Requirements:
#   IBM z/OS core collection 1.2.0 or later
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be written
#                 to for this example.
#
# Optional:
#   data_set_name - this is the data set name that will be created during
#                   execution of this sample.
#   pds_name - this is the pds name that will be used during execution of this
#              sample.
#   system_name - this is the system name that will be used during this example,
#                 determined by executing `uname -n` on the target.
###############################################################################

---

- name: Demonstrate basic z/OS data set operations.
  hosts: zos_host
  gather_facts: false
  vars:
    tgt_tmp_dir: "/tmp"
    data_set_name: "IBMUSER.BASICS.SEQ"
    pds_name: "IBMUSER.BASICS.PDS"
  environment: "{{ environment_vars }}"

  tasks:

    ############################################################################
    # Modules zos_copy, zos_data_set, zos_fetch
    ############################################################################
    # +-------------------------------------------------------------------------
    # | 1. Create a sequential data set
    # | 2. Create a USS file and populate it with some data
    # | 3. Copy the USS file to the sequential data set
    # | 4. Create a PDS and a member within the PDS
    # | 5. Copy the sequential data set to the PDS member
    # | 6. Create a new PDS, replacing the existing one
    # | 7. Delete all data sets that were created during playbook execution
    # +-------------------------------------------------------------------------

    - name: Create a sequential data set
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ data_set_name }}"
        type: seq
        state: present
        replace: true
        record_format: fb
        record_length: 100
        space_primary: 5
        space_type: m
      register: result

    - name: Response for data set creation
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Remove old tgt_tmp_dir/HELLO if it exists, for idempotency.
      ansible.builtin.file:
        path: "{{ tgt_tmp_dir }}/HELLO"
        state: absent
      register: result

    - name: Response for USS file deletion.
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Copy HELLO.jcl from project to USS file.
      ibm.ibm_zos_core.zos_copy:
        src: "{{ playbook_dir }}/files/HELLO.jcl"
        dest: "{{ tgt_tmp_dir }}/HELLO"
      register: result

    - name: Response for populating USS file tgt_tmp_dir/HELLO.
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Copy the USS file to the sequential data set.
      ibm.ibm_zos_core.zos_copy:
        src: "{{ tgt_tmp_dir }}/HELLO"
        dest: "{{ data_set_name }}"
        remote_src: true
      register: result

    - name: Response for copying USS file to data set
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Create a PDS
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ pds_name }}"
        type: pds
        space_primary: 5
        space_type: m
        record_format: fba
        record_length: 100
      register: result

    - name: Response for creating the PDS
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Remove the target PDS member if it exists, for idempotency.
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ pds_name }}(HELLO)"
        type: member
        state: absent
      register: result

    - name: Response for creating the PDS member
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Copy the sequential data set to PDS member
      ibm.ibm_zos_core.zos_copy:
        src: "{{ data_set_name }}"
        dest: "{{ pds_name }}(HELLO)"
        remote_src: true
      register: result

    - name: Response for copying data_set_name to pds_name(HELLO)
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Delete the data sets
      ibm.ibm_zos_core.zos_data_set:
        batch:
          - name: "{{ data_set_name }}"
            state: absent
          - name: "{{ pds_name }}"
            state: absent
      register: result

    - name: Response for deleting the data sets
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Clean up {{ tgt_tmp_dir }}
      ansible.builtin.file:
        path: "{{ tgt_tmp_dir }}/HELLO"
        state: absent

    - name: List tasks this playbook completed.
      ansible.builtin.debug:
        msg:
          - "#########################################################################"
          - "z/OS modules used: zos_copy, zos_data_set, zos_fetch"
          - "-------------------------------------------------------------------------"
          - "1. Create a sequential data set"
          - "2. Create a USS file and populate it with some data"
          - "3. Copy the USS file to the sequential data set"
          - "4. Create a PDS and a member within the PDS"
          - "5. Copy the sequential data set to the PDS member"
          - "6. Create a new PDS, replacing the existing one"
          - "7. Delete all data sets that were created during playbook execution"
          - "#########################################################################"
