###############################################################################
# Â© Copyright IBM Corporation 2020, 2021, 2022
###############################################################################

###############################################################################
# This sample playbook demonstrates how to submit jobs, query and retrieve job
# output using modules included in the Red Hat Ansible Certified  Content for
# IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories submit_query_retrieve.yaml
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook, for example,
#  `data_set_name`.
#
# Requirements:
#   IBM z/OS core collection 1.1.0 or later # FIXME - update to correct version.
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be written
#                 to for this example.
# Optional:
#   data_set_name - this is the data set name that will be created during
#                   execution of this sample.
#   job_name - this is the job name what will be used in this sample, if you
#              change the HELLO.JCL job name, you must update this variable
###############################################################################

---
- name: Demonstrate how to submit jobs, query and retrieve job output.
  hosts: zos_host
  gather_facts: false
  vars:
    tgt_tmp_dir: "/tmp"
    job_name: "HELLO"
    data_set_name: "IBMUSER.JOBS.DEMO"
  environment: "{{ environment_vars }}"

  tasks:

    ############################################################################
    # Modules zos_data_set, zos_job_submit, zos_job_query, zos_job_output,
    # zos_data_set, zos_copy.
    ############################################################################
    # +-------------------------------------------------------------------------
    # | Create a data set and member, create JCL on USS target, copy USS JCL to
    # | data set, submit JCL in data set, query job, get job output. Repeat the
    # | process with JCL submitted from USS file.
    # +-------------------------------------------------------------------------
    ############################################################################

    - name: "Create a PDS data set {{ data_set_name }}."
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ data_set_name }}"
        type: pds
        space_primary: 5
        space_type: m
        record_format: fb
        record_length: 80
        replace: true
      register: create_pds

    - name: "Response for create a PDS data set {{ data_set_name }}."
      ansible.builtin.debug:
        msg: "{{ create_pds }}"

    # +-------------------------------------------------------------------------
    # | "with_sequence" is a type of conditional Ansible loop. The loop here
    # | only runs for a single iteration and is included solely to demonstrate
    # | how easy it is to perform the operation for multiple members. The result
    # | is that single member 'MEM1' is created.
    # +-------------------------------------------------------------------------

    # - name: Delete PDS member, if it exists, for idempotency
    #   zos_data_set:
    #     name: "{{ data_set_name }}(MEM{{ item }})"
    #     state: absent
    #     type: MEMBER
    #   with_sequence: count=1
    #   register: delete_member

    # - name: Response for creating a PDS member.
    #   debug:
    #     msg: "{{ delete_member }}"

    - name: Ensure JCL folder exists in USS to manage JCL.
      ansible.builtin.file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl"
        state: directory
        mode: '644'
      register: create_dir

    - name: Response for ensure JCL folder exists in USS to manage JCL
      ansible.builtin.debug:
        msg: "{{ create_dir }}"

    - name: Ensure tgt_tmp_dir/ansible/jcl/HELLO does not already exists in USS, for idempotency.
      ansible.builtin.file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl/HELLO"
        state: absent
      register: delete_file

    - name: Response for deleting USS file.
      ansible.builtin.debug:
        msg: "{{ delete_file }}"

    - name: Write HELLO JCL to USS in tgt_tmp_dir/ansible/jcl/HELLO
      ibm.ibm_zos_core.zos_copy:
        src: "{{ playbook_dir }}/files/HELLO.jcl"
        dest: "{{ tgt_tmp_dir }}/ansible/jcl/HELLO"
      register: result

    - name: Response for write HELLO JCL to USS in tgt_tmp_dir/ansible/jcl/HELLO
      ansible.builtin.debug:
        msg: "{{ result }}"

    - name: Populate data_set_name member with data from USS file in tgt_tmp_dir/ansible/jcl
      ibm.ibm_zos_core.zos_copy:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/HELLO"
        remote_src: true
        dest: "{{ data_set_name }}(MEM1)"
      register: result

    - name: Response for populate data_set_name member with data from USS file in tgt_tmp_dir/ansible/jcl
      ansible.builtin.debug:
        msg: "{{ result }}"

    # +-------------------------------------------------------------------------
    # | Similar to how the PDS member was created earlier, this is another
    # | Ansible loop with a single iteration designed to showcase how multiple
    # | jobs could be submitted under a single task for members of a single PDS
    # +-------------------------------------------------------------------------

    - name: Submit the JCL data_set_name(MEM1)
      ibm.ibm_zos_core.zos_job_submit:
        src: "{{ data_set_name }}(MEM{{ item }})"
        location: data_set
      register: job_submit
      with_sequence: count=1

    - name: Response for submit the JCL data_set_name.(MEM1)
      ansible.builtin.debug:
        msg: "{{ job_submit }}"

    # +-------------------------------------------------------------------------
    # | There is a list of results returned by the zos_job_submit module. Each
    # | result contains attributes from the job it refers to including job_id,
    # | job_name, owner, content, and return codes. Since only one job was
    # | submitted, it will be the first (and only) job in the results list.
    # +-------------------------------------------------------------------------

    - name: Set job id fact used in this playbook
      ansible.builtin.set_fact:
        submit_job_id: "{{ job_submit.results[0]['jobs'][0]['job_id'] }}"

    - name: Fact `submit_job_id` set with value
      ansible.builtin.debug:
        msg: "{{ submit_job_id }}"

    - name: Query submitted job by job_id
      ibm.ibm_zos_core.zos_job_query:
        job_id: "{{ submit_job_id }}"
      register: query_job

    - name: Response for query submitted job by job_id
      ansible.builtin.debug:
        msg: "{{ query_job }}"

    - name: Get job output for job submit_job_id from PDS member.
      ibm.ibm_zos_core.zos_job_output:
        job_id: "{{ submit_job_id }}"
      register: query_output

    - name: Response for get job output for job submit_job_id from PDS member.
      ansible.builtin.debug:
        msg: "{{ query_output }}"

    # +-------------------------------------------------------------------------
    # | JCL from a USS file can also be submitted as a job by leveraging the
    # | zos_job_submit module.
    # +-------------------------------------------------------------------------

    - name: "Submit job_name JCL located on target in tgt_tmp_dir/ansible/jcl/{{ job_name }}."
      ibm.ibm_zos_core.zos_job_submit:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/{{ job_name }}"
        location: uss
      register: job_submit_uss

    - name: "Response for submit job_name JCL located on target in tgt_tmp_dir/ansible/jcl/job_name"
      ansible.builtin.debug:
        msg: "{{ job_submit_uss }}"

    - name: Set job id fact used in this playbook
      ansible.builtin.set_fact:
        job_id_uss: "{{ job_submit_uss['jobs'][0]['job_id'] }}"

    - name: Print fact `job_id_uss` set with value
      ansible.builtin.debug:
        msg: "{{ job_id_uss }}"

    - name: Query the submitted job job_name on USS target
      ibm.ibm_zos_core.zos_job_query:
        job_id: "{{ job_id_uss }}"
      register: query_output_uss

    - name: Response for query the submitted job job_name on USS target
      ansible.builtin.debug:
        msg: "{{ query_output_uss }}"

    # +-------------------------------------------------------------------------
    # | The following section is commented out because it creates identical
    # | output to when the same job was submited earlier in the playbook
    # | from the PDS member. Feel free to uncomment the following section to
    # | view the full job output.
    # +-------------------------------------------------------------------------

    # - name: Get job output for job {{ job_id_uss }} on USS target
    #   zos_job_output:
    #     job_id: "{{ job_id_uss }}"
    #   register: result

    # - name: Response for Get {{ job_name }} job output on USS target
    #   debug:
    #     msg: "{{ result }}"

    ############################################################################
    # +-------------------------------------------------------------------------
    # | Clean up - remove JCL files from USS, delete PDS.
    # +-------------------------------------------------------------------------
    ############################################################################

    - name: Remove job_name JCL and folder on USS target.
      ansible.builtin.file:
        path: "{{ tgt_tmp_dir }}/ansible"
        state: absent
      register: delete_dir

    - name: Response for remove job_name JCL and folder on USS target.
      ansible.builtin.debug:
        msg: "{{ delete_dir }}"

    - name: "Delete data set {{ data_set_name }}"
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ data_set_name }}"
        state: absent
      register: delete_ds

    - name: Response for delete data set {{ data_set_name }}
      ansible.builtin.debug:
        msg: "{{ delete_ds }}"

    - name: List tasks this playbook completed.
      ansible.builtin.debug:
        msg:
          - "############################################################################"
          - "# z/OS modules used: zos_data_set, zos_job_submit, zos_job_query, "
          - "#   zos_job_output, zos_data_set, zos_copy."
          - "# --------------------------------------------------------------------------"
          - "# 1. Create a data set and member"
          - "# 2. Create JCL on USS target"
          - "# 3. Copy USS JCL to data set"
          - "# 4. Submit JCL in data set"
          - "# 5. Query job"
          - "# 6. Print job output"
          - "# 7. Repeat the process with JCL submitted from USS file"
          - "# 8. Clean up by removing JCL files from USS, delete PDS"
          - "# --------------------------------------------------------------------------"
          - "############################################################################"
