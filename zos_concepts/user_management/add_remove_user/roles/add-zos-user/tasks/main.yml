---
# Copyright (c) IBM Corporation 2020

# tasks file for add-zos-user

- name: Set omvs_home_directory if not set
  tags: home_dir
  ansible.builtin.set_fact:
    omvs_home_directory: "/u/{{ userid | lower }}"
  when: omvs_home_directory is not defined or not omvs_home_directory

- name: Verify user does not exist
  tags: verify
  ibm.ibm_zos_core.zos_tso_command:
    commands: LISTUSER ({{ userid | upper }})
  register: listuser_response
  failed_when: false

- name: Assert desired userid is not in use
  tags: assert
  ansible.builtin.fail:
    msg: "User ID {{ userid | upper }} is in use."
  when: '"UNABLE TO LOCATE USER" not in listuser_response.get("output", [{}])[0].get("content", [""])[0]'

- name: Generate password
  tags: passwd_gen
  ansible.builtin.set_fact:
    password: "{{ '' | generate_password }}"
  when: (password is not defined or not password) and generate_password is defined and generate_password
  no_log: true

- name: Generate passphrase
  tags: passph_gen
  ansible.builtin.set_fact:
    passphrase: "{{ '' | generate_passphrase }}"
  when: (passphrase is not defined or not passphrase) and generate_passphrase is defined and generate_passphrase
  no_log: true

- name: Add user
  tags: add_user
  ibm.ibm_zos_core.zos_tso_command:
    commands: "{{ lookup('template', '../templates/add-user.j2') }}"

- name: Create generic profile with support for enhanced generic naming.
  block:
    - name: Create generic profile
      tags: profile
      ibm.ibm_zos_core.zos_tso_command:
        commands: "ADDSD '{{ userid | upper }}.**' UACC(NONE)"
  rescue:
    - name: Create generic profile, without support for enhanced generic naming
      tags: profile
      ibm.ibm_zos_core.zos_tso_command:
        commands: "ADDSD '{{ userid | upper }}.*' UACC(NONE)"

- name: Permit access to resources
  tags: permit
  ibm.ibm_zos_core.zos_tso_command:
    commands: "{{ lookup('template', '../templates/update-resource-access.j2') }}"
  with_items: "{{ resources_to_permit }}"
  when: resources_to_permit is defined and resources_to_permit and resources_to_permit | length > 0

- name: Add to groups
  tags: groups
  ibm.ibm_zos_core.zos_tso_command:
    commands: "{{ lookup('template', '../templates/connect-user-to-group.j2') }}"
  with_items: "{{ groups_to_connect }}"
  when: groups_to_connect is defined and groups_to_connect and groups_to_connect | length > 0

- name: Debug
  ansible.builtin.debug:
    msg:
      - "DEFINE ALIAS ( NAME('{{ userid | upper }}'){%- if user_catalog is defined and user_catalog %}"
      - "RELATE('{{ user_catalog | upper }}'){%- endif %}{%- if master_catalog is defined and master_catalog %}"
      - "CATALOG('{{ master_catalog | upper }}'){%- endif %}"

- name: Define alias for user ID
  tags: alias
  ibm.ibm_zos_core.zos_tso_command:
    commands: "{{ lookup('template', '../templates/define-alias.j2') }}"

- name: Create the user's ISPPROF data set
  tags: ispprof_data_set, data_set
  ibm.ibm_zos_core.zos_data_set:
    name: "{{ userid | upper }}.SPF.ISPPROF"
    state: present
    type: pds
    space_primary: 2
    space_secondary: 1
    space_type: trk
    block_size: 3120
    record_length: 80

- name: Set omvs_zfs_data_set_name
  tags: home_dir
  ansible.builtin.set_fact:
    omvs_zfs_data_set_name: "{{ (omvs_zfs_data_set_name | default('OMVS.USER.' + userid | upper + '.ZFS', true)) | upper }}"

- name: Create LDS for ZFS data set
  tags: zfs_data_set, data_set
  ibm.ibm_zos_core.zos_data_set:
    name: "{{ omvs_zfs_data_set_name | upper }}"
    state: present
    replace: true
    type: lds
    space_primary: "{{ omvs_zfs_data_set_size if omvs_zfs_data_set_size else '50' }}"
    space_secondary: "{{ omvs_zfs_data_set_size if omvs_zfs_data_set_size else '50' }}"
    space_type: cyl
  register: lds_create_response

- name: Format LDS as ZFS.
  tags: zfs_data_set, data_set
  ansible.builtin.command: zfsadm format -aggregate {{ omvs_zfs_data_set_name | upper }}

- name: Create user's omvs directory if it does not exist
  tags: home_dir
  ansible.builtin.file:
    path: "{{ omvs_home_directory }}"
    state: directory
    mode: '755'
    owner: "{{ userid | lower }}"
    group: "{{ omvs_gid if omvs_gid | default(false) else omit }}"

- name: Mount ZFS to user directory
  ansible.posix.mount:
    path: "{{ omvs_home_directory }}"
    src: "{{ omvs_zfs_data_set_name | upper }}"
    fstype: zfs
    state: present

- name: Overwrite permissions to directory if necessary
  tags: home_dir
  ansible.builtin.file:
    path: "{{ omvs_home_directory }}"
    state: directory
    mode: '0711'
    owner: "{{ userid | lower }}"
    group: "{{ omvs_gid if omvs_gid | default(false) else omit }}"

- name: Copy files
  tags: copy
  ibm.ibm_zos_core.zos_copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    encoding:
      from: ISO8859-1
      to: "{{ target_charset }}"
  with_items: "{{ files_to_copy | default([]) }}"
  when: files_to_copy is defined and files_to_copy is not none

- name: Copy templates
  tags: template
  ansible.builtin.include_tasks:
    file: copy-template.yml
  with_items: "{{ templates_to_copy | default([]) }}"
  when: templates_to_copy is defined and templates_to_copy is not none

- name: Make mount persistent
  when: bpxprm_member is defined and bpxprm_member
  block:
    - name: Generate tempfile to hold BPXPRMxx
      tags: mount
      ansible.builtin.tempfile:
        state: file
      register: temp

    - name: Generate tempfile to hold backup
      tags: mount
      ansible.builtin.tempfile:
        state: file
      register: backup

    - name: Copy BPXPRMxx member to file
      tags: mount
      ansible.builtin.shell: cp "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'" {{ temp.path }}

    - name: Copy BPXPRMxx member to backup
      tags: mount
      ansible.builtin.shell: cp "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'" {{ backup.path }}

    - name: Get file contents.
      tags: mount
      ansible.builtin.command: cat {{ temp.path }}
      changed_when: false
      register: cat_response

    - name: Insert mount into contents
      tags: mount
      ansible.builtin.set_fact:
        updated_contents: "{{ cat_response.stdout | insert_mount(omvs_zfs_data_set_name, omvs_home_directory) }}"

    - name: Insert updated contents back into temp file
      tags: mount
      ibm.ibm_zos_core.zos_copy:
        content: "{{ updated_contents }}"
        dest: "{{ temp.path }}"
        encoding:
          from: ISO8859-1
          to: "{{ target_charset }}"

    - name: Copy updated BPXPRMxx member back to data set
      tags: mount
      ansible.builtin.shell: cp {{ temp.path }} "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'"

    - name: Verify updated contents are valid
      tags: mount
      ibm.ibm_zos_core.zos_operator:
        cmd: "SETOMVS SYNTAXCHECK=({{ bpxprm_member | upper }})"
      register: syntaxcheck_response
      ignore_errors: true

    - name: Undo mount changes if bad syntaxcheck
      tags: mount
      ansible.builtin.shell: cp {{ backup.path }} "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'"
      when: syntaxcheck_response.get("rc", 4) > 0

    - name: Assert persistent mount did not fail
      tags: mount
      ansible.builtin.fail:
        msg: "Persistent mount updated did not pass syntax check."
      when: syntaxcheck_response.get("rc", 4) > 0
  always:
    - name: Remove temporary file
      tags: mount
      ansible.builtin.file:
        path: "{{ temp.path }}"
        state: absent
      when: temp.path is defined and temp.path
    - name: Remove backup file
      tags: mount
      ansible.builtin.file:
        path: "{{ backup.path }}"
        state: absent
      when: backup.path is defined and backup.path

- name: Print password info
  tags: print_info
  ansible.builtin.debug:
    msg: "UserID: '{{ userid | upper }}' Password: '{{ password }}' Passphrase: '{{ passphrase }}'"
  when: print_pass is true

- name: Skip email task if send_email is false
  ansible.builtin.meta: end_host
  when: send_email is not true

- name: Send email containing login credentials to owner of new user
  tags: email
  community.general.mail:
    host: "{{ smtp_server }}"
    port: "{{ smtp_port }}"
    username: "{{ smtp_username }}"
    password: "{{ smtp_password }}"
    to: "{{ email_to }}"
    subject: New UserID Created on {{ inventory_hostname }}
    body: "A new UserID has been created on {{ inventory_hostname }}. UserID: '{{ userid | upper }}' Password: '{{ password }}' Passphrase: '{{ passphrase }}'"
    secure: always
  delegate_to: localhost
  when: send_email is defined and send_email is not none and send_email
  no_log: true
