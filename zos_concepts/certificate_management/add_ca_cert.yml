---

- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - copy:
      dest: ~/pkcs12.p12
      content: '{{ zos_cert_p12_tdes_base64 | b64decode }}'
  - shell: 
      cmd: cat ~/pkcs12.p12
    register: out


- name: Add staged CA cert to RACF.
  hosts: zos_host
  gather_facts: false
  environment: "{{ environment_vars }}"
  tasks:
  
    - name: Copy local p12 file to z/OS dataset
      ibm.ibm_zos_core.zos_copy:
        src: ~/pkcs12.p12
        dest: IBMUSER.COMMON.P12PKG
        force: true
        is_binary: true 
        dest_data_set:
          type: SEQ
          record_format: VB

  
    - name: Create sequential data sets with z/OS certificates and intermediate CA content.
      ibm.ibm_zos_core.zos_copy:
        content: "{{ item.content }}"
        dest: "{{ item.dest_name }}"
        force: true
        dest_data_set:
          type: SEQ
          record_format: VB
      loop:
        - { content: "{{ zos_ca_cert }}", dest_name: IBMUSER.COMMON.INTCERT }
        - { content: "{{ zos_cert }}", dest_name: IBMUSER.COMMON.ZCERT }

    - name: Create USS files with z/OS certificates and private key.
      ibm.ibm_zos_core.zos_copy:
        content: "{{ item.content }}"
        dest: "{{ item.dest_name }}"
        force: true
        mode: '600'
      loop:
        - { content: "{{ zos_cert }}", dest_name: /u/ibmuser/zos_cert.pem }
        - { content: "{{ zos_cert_key }}", dest_name: /u/ibmuser/zos_cert_private_key.pem }

    - name: Pull root CA certificate content and save to file.
      ansible.builtin.get_url:
        url: https://letsencrypt.org/certs/isrgrootx1.pem
        dest: /u/ibmuser/root_ca_cert.pem
        mode: '600'
        validate_certs: false
      register: get_root_ca

    - name: Create sequential data set from root CA in USS.
      ibm.ibm_zos_core.zos_copy:
        src: /u/ibmuser/root_ca_cert.pem
        dest: IBMUSER.COMMON.ROOTCA
        force: true
        remote_src: true
        dest_data_set:
          type: SEQ
          record_format: VB

    - name: Add line to SYS1.PARMLIB(IZUPRM00) member to CSRF_SWITCH(OFF).
      ibm.ibm_zos_core.zos_lineinfile:
        src: SYS1.PARMLIB(IZUPRM00)
        line: CSRF_SWITCH(OFF)

    - name: Delete existing Server cert in RACF keyring (ZOSMF_RING).
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT REMOVE(ID(IZUSVR) LABEL('VS01zOSMFCert') RING(ZOSMF_RING)) ID(IZUSVR)

    - name: Delete existing CA cert in RACF keyring (ZOSMF_RING).
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT REMOVE(CERTAUTH LABEL('VSICA') RING(ZOSMF_RING)) ID(IZUSVR)

    - name: Issue a SETROPTS REFRESH to initialize changes
      ibm.ibm_zos_core.zos_tso_command:
        command: SETROPTS RACLIST(DIGTCERT, DIGTRING) REFRESH

    - name: Define ROOT CA Certificate to RACF
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT CERTAUTH ADD('IBMUSER.COMMON.ROOTCA') WITHLABEL('ROOTCA') TRUST

    - name: Define Intermediate Certificate to RACF
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT CERTAUTH ADD('IBMUSER.COMMON.INTCERT') WITHLABEL('INTERCERT') TRUST

    - name: Define Server/PKCS12 dataset to RACF
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT ID(IZUSVR) ADD('IBMUSER.COMMON.P12PKG') WITHLABEL('SERVERCERT') PASSWORD('{{ zos_cert_p12_password }}')

    - name: Issue a SETROPTS REFRESH to initialize changes
      ibm.ibm_zos_core.zos_tso_command:
        command: SETROPTS RACLIST(DIGTCERT, DIGTRING) REFRESH

    - name: Verify the certificate chain is complete
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT ID(IZUSVR) LISTCHAIN(LABEL('SERVERCERT'))

    - name: Connect ROOT CA certificate to key ring
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT ID(IZUSVR) CONNECT(CERTAUTH LABEL('ROOTCA') RING(ZOSMF_RING))

    - name: Connect Intermediate certificate to key ring
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT ID(IZUSVR) CONNECT(CERTAUTH LABEL('INTERCERT') RING(ZOSMF_RING))

    - name: Connect Server/PKCS12 certificate to key ring
      ibm.ibm_zos_core.zos_tso_command:
        command: RACDCERT ID(IZUSVR) CONNECT(LABEL('SERVERCERT') RING(ZOSMF_RING) DEFAULT)

    - name: Issue a SETROPTS REFRESH to initialize changes
      ibm.ibm_zos_core.zos_tso_command:
        command: SETROPTS RACLIST(DIGTCERT, DIGTRING) REFRESH


    - name: STOP z/OSMF Started task
      ibm.ibm_zos_core.zos_operator:
        cmd: 'P IZUSVR1'

    - name: START z/OSMF Started task
      ibm.ibm_zos_core.zos_operator:
        cmd: 'S IZUSVR1'
        wait_time_s: 15

